#!/usr/bin/env bash
if [ yes != "$STDBUF" ]; then
    # exec 信号量捕获使能
    STDBUF=yes exec /usr/bin/stdbuf -oL -eL "$0"
    exit $?
fi
set -eE
source /etc/envinit.sh
source /etc/utils.sh
# cleanup iptables
PIDS=""
_term() {
    echolog "[clash] Caught SIGTERM signal!"
    echolog "[clash] Tell the clash session to shut down."
    # terminate when the clash-daemon process dies
    pid=`cat /var/clash.pid` || true
    kill -9 ${pid} >/dev/null 2>&1 || true
    tail --pid=${pid} -f /dev/null || true
    if [ "$ENABLE_CLASH" == "1" ] && [ "$IP_ROUTE" == "1" ]; then
        echolog "unset iproutes ..."
        unsetroute >/dev/null 2>&1 || true
        echolog "done."
    fi
    kill -9 ${PIDS} >/dev/null 2>&1 || true
    exit 0
}
trap _term SIGTERM SIGINT ERR
# 转换订阅
if [ "$SUBSCR_URLS" != "" ]; then
    SINCE=`file_expired /etc/clash/.subscr_expr $SUBSCR_EXPR`
    echolog `echo "转换服务: $SUBCONV_URL" | sed -r "s/(127.0.0.1|localhost)/$LOCAL_IP/g"`
    echolog `echo "规则服务: http://$EXPORT_DIR_BIND:$EXPORT_DIR_PORT/ACL4SSR/Clash/config/" | sed -r "s/(127.0.0.1|0.0.0.0)/$LOCAL_IP/g"`
    echolog `echo "转换规则: $REMOTE_CONV_RULE" | sed -r "s/(127.0.0.1|localhost)/$LOCAL_IP/g"`
    $NO_ENGLISH || echolog `echo "Subconverter  : $SUBCONV_URL" | sed -r "s/(127.0.0.1|localhost)/$LOCAL_IP/g"`
    $NO_ENGLISH || echolog `echo "RulesExporter : http://$EXPORT_DIR_BIND:$EXPORT_DIR_PORT/ACL4SSR/Clash/config/" | sed -r "s/(127.0.0.1|0.0.0.0)/$LOCAL_IP/g"`
    $NO_ENGLISH || echolog `echo "SubconvertRule: $REMOTE_CONV_RULE" | sed -r "s/(127.0.0.1|localhost)/$LOCAL_IP/g"`
    if [ "$SINCE" == "-1" ] || [ ! -f "/etc/clash/config.yaml" ]; then
        echolog "订阅已过期 重新订阅中... "
        $NO_ENGLISH || echolog "Subscription has expired, re-subscribing..."
        # 如果依赖本地订阅, 但没有启动服务;
        if [ "`echo "$SUBSCR_URLS" |grep 'http://127.0.0.1:25500/sub'`" != "" ] && [ "$ENABLE_SUBCONV" != "1" ]; then
            echoerr "依赖本地订阅转换服务, 请设置ENABLE_SUBCONV=1"
            $NO_ENGLISH || echoerr "Please set ENABLE_SUBCONV=1 to enable local subconverter"
            exit 1
        fi
        echolog "等待订阅服务启动"
        wait_service_running subconverter
        if [ "`echo "$REMOTE_CONV_RULE" | grep "http://127.0.0.1:$EXPORT_DIR_PORT"`" != "" ]; then
        echolog "等待规则服务启动"
            wait_service_running exporter
        fi
        curl -s --get \
            --data-urlencode "target=clash" \
            --data-urlencode "url=$SUBSCR_URLS" \
            --data-urlencode "config=$REMOTE_CONV_RULE" \
            "$SUBCONV_URL" > /etc/clash/config.yaml.download
        # 错误订阅/转换数据
        VALID="`cat /etc/clash/config.yaml.download | grep -P '(bind-address|mode|port|rules)'`" || true
        if [ "$?" != "0" ] || [ "$VALID" == "" ]; then
            mv /etc/clash/config.yaml.download /etc/clash/config.yaml.wrong
            echoerr "节点订阅失败"
            $NO_ENGLISH || echoerr "Subscription failed"
            exit 1
        fi
        mv /etc/clash/config.yaml.download /etc/clash/config.yaml
        touch /etc/clash/.subscr_expr
    else
        echolog "订阅有效, ${SINCE} 秒后重新订阅"
        $NO_ENGLISH || echolog "Subscription expires after ${SINCE} seconds"
    fi
fi
# 启动clash服务
if [ "$ENABLE_CLASH" == "1" ]; then
    if [ "$IP_ROUTE" == "1" ]; then
        setcap 'cap_net_admin,cap_net_bind_service=+ep' /usr/bin/clash
    else
        setcap 'cap_net_admin,cap_net_bind_service=-ep' /usr/bin/clash || true
        CLASH_TPROXY_PORT=0
    fi
    echolog "使用环境变量覆盖config.yaml设置"
    $NO_ENGLISH || echolog "Override config.yaml with environment variables"
    python3 /default/clash/utils/override.py \
        "/etc/clash/config.yaml" \
        "$REQUIRED_CONFIG" \
        "$CLASH_HTTP_PORT" \
        "$CLASH_SOCKS_PORT" \
        "$CLASH_TPROXY_PORT" \
        "$CLASH_MIXED_PORT" \
        "$LOG_LEVEL" \
        "$IPV6_PROXY"
    ################### 启动clash服务 ###################
    echolog "Clash启动中..."
    $NO_ENGLISH || echolog "Clash is starting ..."
    su - clash -c "/usr/bin/clash -d /etc/clash -ext-ctl 0.0.0.0:$DASH_PORT -ext-ui $DASH_PATH"  >/etc/clash/clash.log 2>&1 &
    EXPID=$!
    # 等待,直到SOCKS端口被监听, 或者clash启动失败
    while :
    do
        PID=`ps -def|grep -P '^clash'|awk '{print $2}'` || true
        PORT_EXIST=`ss -tlnp | awk '{print $4}' | grep -P ".*:$CLASH_SOCKS_PORT" | head -n 1` || true
        if [ "$PID" == "" ] || [ "$PORT_EXIST" == "" ]; then
            EXPID_EXIST=$(ps aux | awk '{print $2}'| grep -w $EXPID) || true
            if [ ! $EXPID_EXIST ];then
                echoerr "clash is not running"
                if [ "`cat /etc/clash/clash.log| grep 'Operation not permitted'`" != "" ]; then
                    echoerr "privileged must be true"
                fi
                exit 1
            fi
            sleep 1
            continue
        fi
        echo $PID > /var/clash.pid
        break
    done
    echolog "Clash已就绪"
    $NO_ENGLISH || echolog "Clash is ready"

    if [ "$IP_ROUTE" == "1" ]; then
        echolog "设置路由规则..."
        $NO_ENGLISH || echolog "Set iproutes ..."
        unsetroute >/dev/null 2>&1 || true
        touch /tmp/setroute.log
        setroute >/tmp/setroute.log 2>/tmp/setroute.err || true
        cat /tmp/setroute.log | xargs -n 1 -P 10 -I {} bash -c 'echolog "[setroute] $@"' _ {}
        cat /tmp/setroute.err | xargs -n 1 -P 10 -I {} bash -c 'echoerr "[setroute] $@"' _ {}
        if [ "`cat /tmp/setroute.log|grep "tproxy is not supported" `" ]; then
            echoerr "当前不支持TProxy! 自动加载xt_TPROXY失败, 请尝试手动执行: 'modprobe xt_TPROXY'"
            $NO_ENGLISH || echoerr "TProxy is not supported"
            exit 1
        fi
    fi
    echolog "Clash控制面板: http://$LOCAL_IP:$DASH_PORT/ui"
    $NO_ENGLISH || echolog "Dashboard: http://$LOCAL_IP:$DASH_PORT/ui"
    tail -f /etc/clash/clash.log \
        | grep -v 'Start initial compatible provider' \
        | xargs -n 1 -P 10 -I {} bash -c 'echolog "$@"' _ {}  2>&1 &
    PIDS="$PIDS "$!
fi
wait